基本cmd命令：
cd 切换目录
mkdir 新建文件夹
ls 列出文件列表
touch 新建文件(Linux)
echo 将输入字符串送往标准输出(Linux/Windows)
输出重定向 > 覆盖 >> 追加



检查版本：
git --version

为全局仓库配置用户名、用户邮箱：
git config --global user.name "user"
git config --global user.email "email@xx.com"

练习：新建一个保存Git项目的文件夹，使用基本cmd命令进入该文件夹。

使用git init初始化仓库。

在目录下新建任意文件，使用git status检查该文件是否为仓库的一部分。
(该文件在目录下存在，但还没有添加到我们刚刚初始化过的Git仓库中)
Git仓库目录下的文件存在 受跟踪(Tracked) 和 不受跟踪(Untracked) 的两种状态。
首次向空仓库目录下添加文件时，这些文件都不会受到跟踪；如需使用Git管理这些
文件，需要仓储这些文件，或者把它们添加到仓储环境里。



只有受跟踪的，处于仓储状态(Staged)的文件可以使用commit功能提交。

使用git add让文件受到跟踪（如为新添加文件）并进入仓储状态（如需保存对文件的修改）。

练习：使用基本cmd命令新建任意个测试文件。

使用git add --all仓储仓库目录下的所有改动（增删改）。
(可使用 -A 替换 --all)



使用 git commit -m "附加信息" 提交仓库中处于仓储状态的文件。
（commit 可类比为为项目新建了一个“存档点”）

使用git status --short查看更简洁紧凑的文件修改状态。
（标记含义：?? 不受跟踪的文件 A 处于仓储状态的文件 M 经过修改的文件 D 删除的文件）
（颜色含义：绿色 已仓储，待提交 红色 未仓储）

在commit命令的-m选项前添加-a以合并执行暂存和提交两个步骤。
（只建议在对仓库内文件作微小改动时采用此操作）

使用git log查看提交日志。



使用git (command) --help查看特定命令的帮助，使用git help --all查看所有可执行命令。
（使用SHIFT + G跳转到页面末尾，按q退出阅览）



使用git branch (branch_name)创建新的Git分支。

使用git branch查看现有分支和当前所在分支。

使用git checkout (branch_name)检查分支并从当前所在分支迁移到目标分支。
（使用-b选项可创建（若目标分支不存在）并迁移到目标分支）

练习：使用基本cmd命令修改任意文件并新增任意文件。

