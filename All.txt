基本cmd命令：
cd 切换目录
mkdir 新建文件夹
ls 列出文件列表
touch 新建文件(Linux)
echo 将输入字符串送往标准输出(Linux/Windows)
输出重定向 > 覆盖 >> 追加



检查版本：
git --version

为全局仓库配置用户名、用户邮箱：
git config --global user.name "user"
git config --global user.email "email@xx.com"
（gitconfig全局配置的保存路径：C:\Users\(username)\.gitconfig)

练习：新建一个保存Git项目的文件夹，使用基本cmd命令进入该文件夹。

使用git init初始化仓库。

在目录下新建任意文件，使用git status检查该文件是否为仓库的一部分。
(该文件在目录下存在，但还没有添加到我们刚刚初始化过的Git仓库中)
Git仓库目录下的文件存在 受跟踪(Tracked) 和 不受跟踪(Untracked) 的两种状态。
首次向空仓库目录下添加文件时，这些文件都不会受到跟踪；如需使用Git管理这些
文件，需要仓储这些文件，或者把它们添加到仓储环境里。



只有受跟踪的，处于仓储状态(Staged)的文件可以使用commit功能提交。

使用git add让文件受到跟踪（如为新添加文件）并进入仓储状态（如需保存对文件的修改）。

练习：使用基本cmd命令新建任意个测试文件。

使用git add --all仓储仓库目录下的所有改动（增删改）。
(可使用 -A 替换 --all)



使用 git commit -m "附加信息" 提交仓库中处于仓储状态的文件。
（commit 可类比为为项目新建了一个“存档点”）

使用git status --short查看更简洁紧凑的文件修改状态。
（标记含义：?? 不受跟踪的文件 A 处于仓储状态的文件 M 经过修改的文件 D 删除的文件）
（颜色含义：绿色 已仓储，待提交 红色 未仓储）

在commit命令的-m选项前添加-a以合并执行暂存和提交两个步骤。
（只建议在对仓库内文件作微小改动时采用此操作）

使用git log查看提交日志。



使用git (command) --help查看特定命令的帮助，使用git help --all查看所有可执行命令。
（使用SHIFT + G跳转到页面末尾，按q退出阅览）



使用git branch (branch_name)创建新的Git分支。

使用git branch查看现有分支和当前所在分支。

使用git checkout (branch_name)检查分支并从当前所在分支迁移到目标分支。
（使用-b选项可创建（若目标分支不存在）并迁移到目标分支）

练习：使用基本cmd命令修改任意文件并新增任意文件。



使用git merge (branch_name)将目标分支合并到当前分支。
（无冲突时采用"Fast forward"模式，冲突时可在确认、修改冲突文件后再次仓储、提交）

使用git branch -d (branch-name)删除目标分支。



使用与Git config配置中相同的邮箱注册Github并新建仓库。

使用git remote add origin (初始URL)为本地仓库指定关联的 初始(origin) Github远程仓库。
(此处origin为对远程仓库链接的本地自定义命名)

使用git push --set-upstream origin master将本地master分支上传至初始URL并设为默认远程分支。
(--set-upstream 可替换为 -u)


使用Github网站提供的文本编辑功能直接编辑文件并完成文件提交。



使用git fetch origin拉取远程仓库的内容变更。

练习：使用git log查看远程仓库的变更日志。

使用git diff (origin/master)查看本地仓库当前所在(master)分支与远程仓库(origin/master)分支的差异。

练习：使用git merge将远程仓库中的指定分支合并至当前所在本地分支。

使用git pull (远程仓库名)与远程仓库同步更新（合并执行fetch与merge命令）。



练习：在本地对文件作任意修改，使用git commit将修改提交至本地仓库并检查git状态。

使用git push将本地仓库中的修改上传至远程仓库。



练习：使用GitHub新建Branch，对文件作任意修改并使用git pull与远程仓库同步更新。



练习：同步本地仓库与远程仓库。

使用git branch -a查看所有本地与远程分支。

使用git branch -r查看所有远程分支。

使用git checkout (远程分支名)切换到目标分支并与远程分支建立连接。



练习：新建任意分支，对本地文件做任意修改，仓储文件并提交。

使用git push origin (本地分支名)将本地分支上传至Github。

使用Github提供的Compare & pull request功能比对分支间变更并为更新目的留言。

使用Github提供的Merge功能将Pull request合并到分支。

练习：删除本地和Github上的无用分支。
git remote show origin
git fetch --prune



使用Github建立理想工作流：
从masterbranch创建新的分支（使用易于理解的分支名称）
编辑文件，在小的里程碑处commit变更，在留言中阐述变更内容与作用释义
通过提交PullRequest提示团队中的其他人有新的变更等待考量与阅览
通过Review复览、讨论变更
测试部署 → 与主线合并



可选：使用仓库中的文件作为页面样式和内容在Github上托管页面。



使用Fork拷贝GitHub上其他人的仓库



使用git clone URL完整拷贝整个仓库
(For private repo, use: https://username@github.com/xxx.git)

使用git clone URL folder拷贝到指定文件夹

使用git remote -v查看remotes链接设置

使用git remote rename (oldname) (newname) 重命名remotes名称

使用git remote --help查看帮助文档
(git remote set-url (name) (url))

使用git remote add (name) (url)增添remotes链接
(建议将自己的仓库命名为origin，Fork的源仓库命名为upstream)



练习：
对本地文件作任意修改，commit并push到经Fork的远程仓库；向被Fork的源仓库发送Pull request。



