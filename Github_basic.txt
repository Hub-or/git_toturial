使用与Git config配置中相同的邮箱注册Github并新建仓库。

使用git remote add origin (初始URL)为本地仓库指定关联的 初始(origin) Github远程仓库。
(此处origin为对远程仓库链接的本地自定义命名)

使用git push --set-upstream origin master将本地master分支上传至初始URL并设为默认远程分支。



使用Github网站提供的文本编辑功能直接编辑文件并完成文件提交。



使用git fetch origin拉取远程仓库的内容变更。

练习：使用git log查看远程仓库的变更日志。

使用git diff (origin/master)查看本地仓库当前所在(master)分支与远程仓库(origin/master)分支的差异。

练习：使用git merge将远程仓库中的指定分支合并至当前所在本地分支。

使用git pull (远程仓库名)与远程仓库同步更新（合并执行fetch与merge命令）。



练习：在本地对文件作任意修改，使用git commit将修改提交至本地仓库并检查git状态。

使用git push将本地仓库中的修改上传至远程仓库。



练习：使用GitHub新建Branch，对文件作任意修改并使用git pull与远程仓库同步更新。



练习：同步本地仓库与远程仓库。

使用git branch -a查看所有本地与远程分支。

使用git branch -r查看所有远程分支。

使用git checkout (远程分支名)切换到目标分支并与远程分支建立连接。



练习：新建任意分支，对本地文件做任意修改，仓储文件并提交。

使用git push origin (本地分支名)将本地分支上传至Github。

使用Github提供的Compare & pull request功能比对分支间变更并为更新目的留言。

使用Github提供的Merge功能将Pull request合并到分支。

练习：删除本地和Github上的无用分支。



使用Github建立理想工作流：
从masterbranch创建新的分支（使用易于理解的分支名称）
编辑文件，在小的里程碑处commit变更，在留言中阐述变更内容与作用释义
通过提交PullRequest提示团队中的其他人有新的变更等待考量与阅览
通过Review复览、讨论变更
测试部署 → 与主线合并



